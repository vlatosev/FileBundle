<?php

namespace EDV\FileBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Imagine\Imagick\Imagine;

/**
 * EdImageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EdImageRepository extends EntityRepository
{
  public function getUniqueCachedName($extension = null)
  {
    $extension = empty($extension) ? '' : ".$extension";
    do
    {
      $fileName = uniqid('', true);
      $fileName = implode('-', array_reverse(explode('.', $fileName))) . $extension;
    }
    while($this->uniqueNameExists($fileName));
    return $fileName;
  }

  /**
   * @param $fileName
   * @return bool
   */
  private function uniqueNameExists($fileName)
  {
    $dql = "SELECT COUNT(image) FROM EDVFileBundle:EdImage AS image WHERE image.baseDir = :name";
    $query = $this->_em->createQuery($dql)->setParameters(array('name' => $fileName));
    $result = $query->getSingleScalarResult();
    return ($result > 0);
  }

  public function cleanOnFileUpdate(EdFile $ed_file, $photodir)
  {
    /** @var $image EdImage */
    $image = $this->findOneBy(array('file' => $ed_file));
    if(!is_null($image))
    {
      $this->removeAllPublished($image, $photodir);
    }
  }

  private function removeAllPublished(EdImage $image, $photodir)
  {
    $ds = DIRECTORY_SEPARATOR;
    $webdir = __DIR__ . $ds . '..' . $ds . '..' . $ds . '..' . $ds . '..' . $ds;
    $dir =  $webdir . 'web' . $ds . $photodir . $ds . $image->getBaseDir();
    if(is_dir($dir))
    {
      $list = glob($dir . '/*');
      foreach($list as $file)
      {
        if(is_file($file)) unlink($file);
      }
      rmdir($dir);
    }
  }

  public function setImageData(EdImage $entity)
  {
    $file   = $entity->getFile();
    if(is_null($file)) return null;
    $source = $file->getUploadFile();
    if(!is_null($source))
    {
      $imagine = extension_loaded('imagick') ? new Imagine() : new \Imagine\Gd\Imagine();
      $file = $imagine->open($source->getPathname());
      $entity->setWidth($file->getSize()->getWidth());
      $entity->setHeight($file->getSize()->getHeight());
      $entity->setProcessed(true);
    }
    $entity->setBaseDir($entity->getFile()->getFileNamespace() . '/' . $this->getUniqueCachedName());
    $entity->setExtension($entity->getFile()->getExtension());
  }
}
